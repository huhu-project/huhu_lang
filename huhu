#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys
import os
import re


syntax = {
    'yaz': {
        'function': '_print'
    }
}


def _equal(command):
    variable = command.replace(' =', '=').replace('= ', '=').split('=')
    if len(variable) > 0:
        globals()[variable[0].strip()] = variable[1].strip()
    else:
        return {'error': 101}


def _plus(command):
    """ iki ve daha fazla sayıda integer toplanmak üzere gelirse
        ögeler ile klasik toplama işlemi yapılıp geri döndürülür.
        ögelerden biri string ise toplama mantığından çıkılıp
        tüm öğeler string olarak değerlendirilir, birleştirilir
        ve geri döndürülür.
    """
    params = command.replace(' +', '+').replace('+ ', '+').split('+')
    for param in params:
        try:
            param = int(param)
        except:
            pass
    all_integer = True
    for param in params:
        if not isinstance(param, int):
            all_integer = False
    if all_integer:
        to_run = params[0]
        for param in params[1:]:
            to_run = to_run + "+" + param
        return eval(to_run)
    else:
        to_run = params[0]
        for param in params[1:]:
            to_run = to_run + param
        return to_run


def _print(line):
    val = line.split('yaz')[1].strip()
    if val in globals():
        print(globals()[val])
    else:
        print(val)


def _set(set_match, line):
    split = line.split('=')
    variable = split[0].strip()
    value = split[1].strip()
    try:
        value = int(value)
    except:
        pass
    globals()[variable] = value


def _list(list_match, line):
    split = line.split('=')
    variable = split[0].strip()
    list = [el.strip() for el in split[1].split(",") if el != '']
    globals()[variable] = list


def _for(for_match):
    list = globals()[for_match.group(3)]
    function = globals()[syntax[for_match.group(1)]['function']]
    for i in list:
        if not "_"in i:
            function(i)


def read(line):
    # bir liste ataması yapılıyor ise
    list_match = re.match(r'(.*).=.(.*),', line)
    if list_match:
        print('liste yakaladı')
        _list(list_match, line)
    # değişkene bir str veya int ataması yapılıyor ise
    set_match = re.match(r'(.*).=.(.*)', line)
    if set_match:
        _set(set_match, line)
    # bir döngü mevcut ise
    for_match = re.search(r'(.*) (.*) dön (.*)', line)
    if for_match:
        _for(for_match)
    # ekrana bir şey yazılıyor ise
    write_match = re.search(r'yaz (.*)', line)
    if write_match:
        _print(line)

def parser(source):
    return [read(line) for line in source.split("\n") if line != '']


def huhu():
    if "huhu" in sys.argv:
        sys.argv.remove('huhu')
    if len(sys.argv[1:]) > 0:
        for i in range(len(sys.argv[1:])):
            if sys.argv[1:][i][0] == "/":
                file_path = sys.argv[1:][i]
            else:
                file_path = "%s/%s" % (os.getcwd(), sys.argv[1:][i])
            if not file_path[-5:] == '.huhu':
                print("dosya uzantısı .huhu olmalıdır")
                break
            try:
                source = open(file_path).read()
            except:
                print("dosyayı bulamadım")
                break
            for result in parser(source):
                if isinstance(result, str):
                    print(result)
    else:
        while True:
            command = input('>>> ')
            if command.strip() == "çık":
                print("güle güle :)")
                break
            if isinstance(command, str):
                result = read(command)
                if result:
                    print(result)

if __name__ == "__main__":
    huhu()
