#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys
import os
import re


syntax = {
    'yaz': {
        'function': '_print'
    }
}


def _print(command):
    if command[0:3] == "yaz":
        key = command.split('yaz')[1].strip()
        value = command.split('yaz')[1].strip()
        if value in globals():
            getval = globals()[key]
            if isinstance(getval, list):
                dump = getval[0]
                for l in getval[1:]:
                    dump = "%s, %s" % (dump, l)
                return 'print("%s")' % dump
            else:
                return 'print("%s")' % getval
        else:
            return 'print("%s")' % value
    else:
        return 'print("%s")' % command


def _set(set_match, line):
    split = line.split('=')
    key = split[0].strip()
    value = split[1].strip()
    globals()[key] = value


def _list(list_match, line):
    split = line.split('=')
    variable = split[0].strip()
    list = [el.strip() for el in split[1].split(",") if el != '']
    globals()[variable] = list


def _for(for_match, line):
    try:
        getlist = globals()[for_match.group(3).strip()]
        function_name = for_match.group(1).strip()
        function = globals()[syntax[function_name]['function']]
        for i in getlist:
            exec(function(i))
    except:
        return "False"
    return "True"


def _condition(line):
    print("_condition")


def _plus(command):
    """ iki ve daha fazla sayıda integer toplanmak üzere gelirse
        ögeler ile klasik toplama işlemi yapılıp geri döndürülür.
        ögelerden biri string ise toplama mantığından çıkılıp
        tüm öğeler string olarak değerlendirilir, birleştirilir
        ve geri döndürülür.
    """
    params = command.replace(' +', '+').replace('+ ', '+').split('+')
    for param in params:
        try:
            param = int(param)
        except:
            pass
    all_integer = True
    for param in params:
        if not isinstance(param, int):
            all_integer = False
    if all_integer:
        to_run = params[0]
        for param in params[1:]:
            to_run = to_run + "+" + param
        return eval(to_run)
    else:
        to_run = params[0]
        for param in params[1:]:
            to_run = to_run + param
        return to_run


def read(line):
    list_pattern = '(.*).=.(.*),'
    set_pattern = '(.*).=.(.*)'
    for_pattern = '(.*) (.*) dön (.*)'
    write_pattern = 'yaz (.*)'
    condition_pattern = 'eğer (.*) ise (.*)'
    # bir liste ataması yapılıyor ise
    if re.match(list_pattern, line):
        line = _list(re.match(list_pattern, line), line)
    # değişkene bir str veya int ataması yapılıyor ise
    elif re.match(set_pattern, line):
        line = _set(re.match(set_pattern, line), line)
    # bir döngü mevcut ise
    elif re.match(for_pattern, line):
        line = _for(re.match(for_pattern, line), line)
    # ekrana bir şey yazılıyor ise
    elif re.match(condition_pattern, line):
        line = _condition(line)
    elif re.match(write_pattern, line):
        line = _print(line)
    else:
        line = "pass"
    return line


def parser(source):
    return [read(line) for line in source.split("\n") if line != '']


def run_huhu():
    if "huhu" in sys.argv:
        sys.argv.remove('huhu')
    if len(sys.argv[1:]) > 0:
        for i in range(len(sys.argv[1:])):
            if sys.argv[1:][i][0] == "/":
                file_path = sys.argv[1:][i]
            else:
                file_path = "%s/%s" % (os.getcwd(), sys.argv[1:][i])
            if not file_path[-5:] == '.huhu':
                print("dosya uzantısı .huhu olmalıdır")
                break
            try:
                source = open(file_path).read()
            except:
                print("dosyayı bulamadım")
                break
            for result in parser(source):
                if isinstance(result, str):
                    exec(result)
    else:
        print('huhu!')
        while True:
            command = input('>>> ')
            if command.strip() == "çık":
                print("güle güle :)")
                break
            if isinstance(command, str):
                result = read(command)
                if result:
                    exec(result)

if __name__ == "__main__":
    run_huhu()
